X is <arithmetic expression>
The variable X is set to the value of the arithmetic expression. On backtracking it is unassigned.

The arithmetic expression looks like an arithmetic expression in any other programming language.

Here is how to use Prolog as a calculator.

?- X is 2 + 2.
X = 4

?- X is 3 * 4 + 2.
X = 14
Parentheses clarify precedence.

?- X is 3 * (4 + 2).
X = 18

?- X is (8 / 4) / 2.
X = 1
In addition to 'is,' Prolog provides a number of operators that compare two numbers. These include 'greater than', 'less than', 'greater or equal than', and 'less or equal than.' They behave more logically, and succeed or fail according to whether the comparison is true or false. Notice the order of the symbols in the greater or equal than and less than or equal operators. They are specifically constructed not to look like an arrow, so that you can use arrow symbols in your programs without confusion.

X > Y
X < Y
X >= Y
X =< Y
Here are a few examples of their use.

?- 4 > 3.
yes

?- 4 < 3.
no

?- X is 2 + 2, X > 3.
X = 4

?- X is 2 + 2, 3 >= X.
no

?- 3+4 > 3*2.
yes
They can be used in rules as well. Here are two example predicates. One converts centigrade temperatures to Fahrenheit, the other checks if a temperature is below freezing.

c_to_f(C,F) :-
  F is C * 9 / 5 + 32.

freezing(F) :-
  F =< 32.
Here are some examples of their use.

?- c_to_f(100,X).
X = 212
yes

?- freezing(15).
yes

?- freezing(45).
no
